schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type ClaimDefaultedLoanEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  collateralQuantityClaimed: BigDecimal!
  collateralPrice: BigDecimal!
  collateralValueClaimed: BigDecimal!
  loan: CoolerLoan!
  secondsSinceExpiry: BigInt!
}

input ClaimDefaultedLoanEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  collateralQuantityClaimed: BigDecimal
  collateralQuantityClaimed_not: BigDecimal
  collateralQuantityClaimed_gt: BigDecimal
  collateralQuantityClaimed_lt: BigDecimal
  collateralQuantityClaimed_gte: BigDecimal
  collateralQuantityClaimed_lte: BigDecimal
  collateralQuantityClaimed_in: [BigDecimal!]
  collateralQuantityClaimed_not_in: [BigDecimal!]
  collateralPrice: BigDecimal
  collateralPrice_not: BigDecimal
  collateralPrice_gt: BigDecimal
  collateralPrice_lt: BigDecimal
  collateralPrice_gte: BigDecimal
  collateralPrice_lte: BigDecimal
  collateralPrice_in: [BigDecimal!]
  collateralPrice_not_in: [BigDecimal!]
  collateralValueClaimed: BigDecimal
  collateralValueClaimed_not: BigDecimal
  collateralValueClaimed_gt: BigDecimal
  collateralValueClaimed_lt: BigDecimal
  collateralValueClaimed_gte: BigDecimal
  collateralValueClaimed_lte: BigDecimal
  collateralValueClaimed_in: [BigDecimal!]
  collateralValueClaimed_not_in: [BigDecimal!]
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: CoolerLoan_filter
  secondsSinceExpiry: BigInt
  secondsSinceExpiry_not: BigInt
  secondsSinceExpiry_gt: BigInt
  secondsSinceExpiry_lt: BigInt
  secondsSinceExpiry_gte: BigInt
  secondsSinceExpiry_lte: BigInt
  secondsSinceExpiry_in: [BigInt!]
  secondsSinceExpiry_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClaimDefaultedLoanEvent_filter]
  or: [ClaimDefaultedLoanEvent_filter]
}

enum ClaimDefaultedLoanEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  collateralQuantityClaimed
  collateralPrice
  collateralValueClaimed
  loan
  loan__id
  loan__createdBlock
  loan__createdTimestamp
  loan__createdTransaction
  loan__cooler
  loan__loanId
  loan__borrower
  loan__lender
  loan__interest
  loan__principal
  loan__collateral
  loan__expiryTimestamp
  loan__hasCallback
  loan__collateralToken
  loan__debtToken
  secondsSinceExpiry
}

type ClearLoanRequestEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  request: CoolerLoanRequest!
  loan: CoolerLoan!
}

input ClearLoanRequestEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  request: String
  request_not: String
  request_gt: String
  request_lt: String
  request_gte: String
  request_lte: String
  request_in: [String!]
  request_not_in: [String!]
  request_contains: String
  request_contains_nocase: String
  request_not_contains: String
  request_not_contains_nocase: String
  request_starts_with: String
  request_starts_with_nocase: String
  request_not_starts_with: String
  request_not_starts_with_nocase: String
  request_ends_with: String
  request_ends_with_nocase: String
  request_not_ends_with: String
  request_not_ends_with_nocase: String
  request_: CoolerLoanRequest_filter
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: CoolerLoan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClearLoanRequestEvent_filter]
  or: [ClearLoanRequestEvent_filter]
}

enum ClearLoanRequestEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  request
  request__id
  request__createdBlock
  request__createdTimestamp
  request__createdTransaction
  request__cooler
  request__requestId
  request__borrower
  request__collateralToken
  request__debtToken
  request__amount
  request__interestPercentage
  request__loanToCollateralRatio
  request__durationSeconds
  request__isRescinded
  loan
  loan__id
  loan__createdBlock
  loan__createdTimestamp
  loan__createdTransaction
  loan__cooler
  loan__loanId
  loan__borrower
  loan__lender
  loan__interest
  loan__principal
  loan__collateral
  loan__expiryTimestamp
  loan__hasCallback
  loan__collateralToken
  loan__debtToken
}

type ClearinghouseSnapshot {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  clearinghouse: Bytes!
  isActive: Boolean!
  nextRebalanceTimestamp: BigInt!
  interestReceivables: BigDecimal!
  principalReceivables: BigDecimal!
  daiBalance: BigDecimal!
  sDaiBalance: BigDecimal!
  sDaiInDaiBalance: BigDecimal!
  treasuryDaiBalance: BigDecimal!
  treasurySDaiBalance: BigDecimal!
  treasurySDaiInDaiBalance: BigDecimal!
  rebalanceEvents(skip: Int = 0, first: Int = 100, orderBy: RebalanceEvent_orderBy, orderDirection: OrderDirection, where: RebalanceEvent_filter): [RebalanceEvent!]!
  defundEvents(skip: Int = 0, first: Int = 100, orderBy: DefundEvent_orderBy, orderDirection: OrderDirection, where: DefundEvent_filter): [DefundEvent!]!
}

input ClearinghouseSnapshot_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  clearinghouse: Bytes
  clearinghouse_not: Bytes
  clearinghouse_gt: Bytes
  clearinghouse_lt: Bytes
  clearinghouse_gte: Bytes
  clearinghouse_lte: Bytes
  clearinghouse_in: [Bytes!]
  clearinghouse_not_in: [Bytes!]
  clearinghouse_contains: Bytes
  clearinghouse_not_contains: Bytes
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  nextRebalanceTimestamp: BigInt
  nextRebalanceTimestamp_not: BigInt
  nextRebalanceTimestamp_gt: BigInt
  nextRebalanceTimestamp_lt: BigInt
  nextRebalanceTimestamp_gte: BigInt
  nextRebalanceTimestamp_lte: BigInt
  nextRebalanceTimestamp_in: [BigInt!]
  nextRebalanceTimestamp_not_in: [BigInt!]
  interestReceivables: BigDecimal
  interestReceivables_not: BigDecimal
  interestReceivables_gt: BigDecimal
  interestReceivables_lt: BigDecimal
  interestReceivables_gte: BigDecimal
  interestReceivables_lte: BigDecimal
  interestReceivables_in: [BigDecimal!]
  interestReceivables_not_in: [BigDecimal!]
  principalReceivables: BigDecimal
  principalReceivables_not: BigDecimal
  principalReceivables_gt: BigDecimal
  principalReceivables_lt: BigDecimal
  principalReceivables_gte: BigDecimal
  principalReceivables_lte: BigDecimal
  principalReceivables_in: [BigDecimal!]
  principalReceivables_not_in: [BigDecimal!]
  daiBalance: BigDecimal
  daiBalance_not: BigDecimal
  daiBalance_gt: BigDecimal
  daiBalance_lt: BigDecimal
  daiBalance_gte: BigDecimal
  daiBalance_lte: BigDecimal
  daiBalance_in: [BigDecimal!]
  daiBalance_not_in: [BigDecimal!]
  sDaiBalance: BigDecimal
  sDaiBalance_not: BigDecimal
  sDaiBalance_gt: BigDecimal
  sDaiBalance_lt: BigDecimal
  sDaiBalance_gte: BigDecimal
  sDaiBalance_lte: BigDecimal
  sDaiBalance_in: [BigDecimal!]
  sDaiBalance_not_in: [BigDecimal!]
  sDaiInDaiBalance: BigDecimal
  sDaiInDaiBalance_not: BigDecimal
  sDaiInDaiBalance_gt: BigDecimal
  sDaiInDaiBalance_lt: BigDecimal
  sDaiInDaiBalance_gte: BigDecimal
  sDaiInDaiBalance_lte: BigDecimal
  sDaiInDaiBalance_in: [BigDecimal!]
  sDaiInDaiBalance_not_in: [BigDecimal!]
  treasuryDaiBalance: BigDecimal
  treasuryDaiBalance_not: BigDecimal
  treasuryDaiBalance_gt: BigDecimal
  treasuryDaiBalance_lt: BigDecimal
  treasuryDaiBalance_gte: BigDecimal
  treasuryDaiBalance_lte: BigDecimal
  treasuryDaiBalance_in: [BigDecimal!]
  treasuryDaiBalance_not_in: [BigDecimal!]
  treasurySDaiBalance: BigDecimal
  treasurySDaiBalance_not: BigDecimal
  treasurySDaiBalance_gt: BigDecimal
  treasurySDaiBalance_lt: BigDecimal
  treasurySDaiBalance_gte: BigDecimal
  treasurySDaiBalance_lte: BigDecimal
  treasurySDaiBalance_in: [BigDecimal!]
  treasurySDaiBalance_not_in: [BigDecimal!]
  treasurySDaiInDaiBalance: BigDecimal
  treasurySDaiInDaiBalance_not: BigDecimal
  treasurySDaiInDaiBalance_gt: BigDecimal
  treasurySDaiInDaiBalance_lt: BigDecimal
  treasurySDaiInDaiBalance_gte: BigDecimal
  treasurySDaiInDaiBalance_lte: BigDecimal
  treasurySDaiInDaiBalance_in: [BigDecimal!]
  treasurySDaiInDaiBalance_not_in: [BigDecimal!]
  rebalanceEvents_: RebalanceEvent_filter
  defundEvents_: DefundEvent_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClearinghouseSnapshot_filter]
  or: [ClearinghouseSnapshot_filter]
}

enum ClearinghouseSnapshot_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  clearinghouse
  isActive
  nextRebalanceTimestamp
  interestReceivables
  principalReceivables
  daiBalance
  sDaiBalance
  sDaiInDaiBalance
  treasuryDaiBalance
  treasurySDaiBalance
  treasurySDaiInDaiBalance
  rebalanceEvents
  defundEvents
}

type CoolerLoan {
  id: String!
  createdBlock: BigInt!
  createdTimestamp: BigInt!
  createdTransaction: Bytes!
  cooler: Bytes!
  request: CoolerLoanRequest!
  loanId: BigInt!
  borrower: Bytes!
  lender: Bytes!
  interest: BigDecimal!
  principal: BigDecimal!
  collateral: BigDecimal!
  expiryTimestamp: BigInt!
  hasCallback: Boolean!
  collateralToken: Bytes!
  debtToken: Bytes!
  creationEvents(skip: Int = 0, first: Int = 100, orderBy: ClearLoanRequestEvent_orderBy, orderDirection: OrderDirection, where: ClearLoanRequestEvent_filter): [ClearLoanRequestEvent!]!
  defaultedClaimEvents(skip: Int = 0, first: Int = 100, orderBy: ClaimDefaultedLoanEvent_orderBy, orderDirection: OrderDirection, where: ClaimDefaultedLoanEvent_filter): [ClaimDefaultedLoanEvent!]!
  repaymentEvents(skip: Int = 0, first: Int = 100, orderBy: RepayLoanEvent_orderBy, orderDirection: OrderDirection, where: RepayLoanEvent_filter): [RepayLoanEvent!]!
  extendEvents(skip: Int = 0, first: Int = 100, orderBy: ExtendLoanEvent_orderBy, orderDirection: OrderDirection, where: ExtendLoanEvent_filter): [ExtendLoanEvent!]!
}

type CoolerLoanRequest {
  id: String!
  createdBlock: BigInt!
  createdTimestamp: BigInt!
  createdTransaction: Bytes!
  cooler: Bytes!
  requestId: BigInt!
  borrower: Bytes!
  collateralToken: Bytes!
  debtToken: Bytes!
  amount: BigDecimal!
  interestPercentage: BigDecimal!
  loanToCollateralRatio: BigDecimal!
  durationSeconds: BigInt!
  isRescinded: Boolean!
  requestEvents(skip: Int = 0, first: Int = 100, orderBy: RequestLoanEvent_orderBy, orderDirection: OrderDirection, where: RequestLoanEvent_filter): [RequestLoanEvent!]!
  rescindEvents(skip: Int = 0, first: Int = 100, orderBy: RescindLoanRequestEvent_orderBy, orderDirection: OrderDirection, where: RescindLoanRequestEvent_filter): [RescindLoanRequestEvent!]!
  clearEvents(skip: Int = 0, first: Int = 100, orderBy: ClearLoanRequestEvent_orderBy, orderDirection: OrderDirection, where: ClearLoanRequestEvent_filter): [ClearLoanRequestEvent!]!
  loans(skip: Int = 0, first: Int = 100, orderBy: CoolerLoan_orderBy, orderDirection: OrderDirection, where: CoolerLoan_filter): [CoolerLoan!]!
}

input CoolerLoanRequest_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  createdBlock: BigInt
  createdBlock_not: BigInt
  createdBlock_gt: BigInt
  createdBlock_lt: BigInt
  createdBlock_gte: BigInt
  createdBlock_lte: BigInt
  createdBlock_in: [BigInt!]
  createdBlock_not_in: [BigInt!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdTransaction: Bytes
  createdTransaction_not: Bytes
  createdTransaction_gt: Bytes
  createdTransaction_lt: Bytes
  createdTransaction_gte: Bytes
  createdTransaction_lte: Bytes
  createdTransaction_in: [Bytes!]
  createdTransaction_not_in: [Bytes!]
  createdTransaction_contains: Bytes
  createdTransaction_not_contains: Bytes
  cooler: Bytes
  cooler_not: Bytes
  cooler_gt: Bytes
  cooler_lt: Bytes
  cooler_gte: Bytes
  cooler_lte: Bytes
  cooler_in: [Bytes!]
  cooler_not_in: [Bytes!]
  cooler_contains: Bytes
  cooler_not_contains: Bytes
  requestId: BigInt
  requestId_not: BigInt
  requestId_gt: BigInt
  requestId_lt: BigInt
  requestId_gte: BigInt
  requestId_lte: BigInt
  requestId_in: [BigInt!]
  requestId_not_in: [BigInt!]
  borrower: Bytes
  borrower_not: Bytes
  borrower_gt: Bytes
  borrower_lt: Bytes
  borrower_gte: Bytes
  borrower_lte: Bytes
  borrower_in: [Bytes!]
  borrower_not_in: [Bytes!]
  borrower_contains: Bytes
  borrower_not_contains: Bytes
  collateralToken: Bytes
  collateralToken_not: Bytes
  collateralToken_gt: Bytes
  collateralToken_lt: Bytes
  collateralToken_gte: Bytes
  collateralToken_lte: Bytes
  collateralToken_in: [Bytes!]
  collateralToken_not_in: [Bytes!]
  collateralToken_contains: Bytes
  collateralToken_not_contains: Bytes
  debtToken: Bytes
  debtToken_not: Bytes
  debtToken_gt: Bytes
  debtToken_lt: Bytes
  debtToken_gte: Bytes
  debtToken_lte: Bytes
  debtToken_in: [Bytes!]
  debtToken_not_in: [Bytes!]
  debtToken_contains: Bytes
  debtToken_not_contains: Bytes
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  interestPercentage: BigDecimal
  interestPercentage_not: BigDecimal
  interestPercentage_gt: BigDecimal
  interestPercentage_lt: BigDecimal
  interestPercentage_gte: BigDecimal
  interestPercentage_lte: BigDecimal
  interestPercentage_in: [BigDecimal!]
  interestPercentage_not_in: [BigDecimal!]
  loanToCollateralRatio: BigDecimal
  loanToCollateralRatio_not: BigDecimal
  loanToCollateralRatio_gt: BigDecimal
  loanToCollateralRatio_lt: BigDecimal
  loanToCollateralRatio_gte: BigDecimal
  loanToCollateralRatio_lte: BigDecimal
  loanToCollateralRatio_in: [BigDecimal!]
  loanToCollateralRatio_not_in: [BigDecimal!]
  durationSeconds: BigInt
  durationSeconds_not: BigInt
  durationSeconds_gt: BigInt
  durationSeconds_lt: BigInt
  durationSeconds_gte: BigInt
  durationSeconds_lte: BigInt
  durationSeconds_in: [BigInt!]
  durationSeconds_not_in: [BigInt!]
  isRescinded: Boolean
  isRescinded_not: Boolean
  isRescinded_in: [Boolean!]
  isRescinded_not_in: [Boolean!]
  requestEvents_: RequestLoanEvent_filter
  rescindEvents_: RescindLoanRequestEvent_filter
  clearEvents_: ClearLoanRequestEvent_filter
  loans_: CoolerLoan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CoolerLoanRequest_filter]
  or: [CoolerLoanRequest_filter]
}

enum CoolerLoanRequest_orderBy {
  id
  createdBlock
  createdTimestamp
  createdTransaction
  cooler
  requestId
  borrower
  collateralToken
  debtToken
  amount
  interestPercentage
  loanToCollateralRatio
  durationSeconds
  isRescinded
  requestEvents
  rescindEvents
  clearEvents
  loans
}

input CoolerLoan_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  createdBlock: BigInt
  createdBlock_not: BigInt
  createdBlock_gt: BigInt
  createdBlock_lt: BigInt
  createdBlock_gte: BigInt
  createdBlock_lte: BigInt
  createdBlock_in: [BigInt!]
  createdBlock_not_in: [BigInt!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdTransaction: Bytes
  createdTransaction_not: Bytes
  createdTransaction_gt: Bytes
  createdTransaction_lt: Bytes
  createdTransaction_gte: Bytes
  createdTransaction_lte: Bytes
  createdTransaction_in: [Bytes!]
  createdTransaction_not_in: [Bytes!]
  createdTransaction_contains: Bytes
  createdTransaction_not_contains: Bytes
  cooler: Bytes
  cooler_not: Bytes
  cooler_gt: Bytes
  cooler_lt: Bytes
  cooler_gte: Bytes
  cooler_lte: Bytes
  cooler_in: [Bytes!]
  cooler_not_in: [Bytes!]
  cooler_contains: Bytes
  cooler_not_contains: Bytes
  request: String
  request_not: String
  request_gt: String
  request_lt: String
  request_gte: String
  request_lte: String
  request_in: [String!]
  request_not_in: [String!]
  request_contains: String
  request_contains_nocase: String
  request_not_contains: String
  request_not_contains_nocase: String
  request_starts_with: String
  request_starts_with_nocase: String
  request_not_starts_with: String
  request_not_starts_with_nocase: String
  request_ends_with: String
  request_ends_with_nocase: String
  request_not_ends_with: String
  request_not_ends_with_nocase: String
  request_: CoolerLoanRequest_filter
  loanId: BigInt
  loanId_not: BigInt
  loanId_gt: BigInt
  loanId_lt: BigInt
  loanId_gte: BigInt
  loanId_lte: BigInt
  loanId_in: [BigInt!]
  loanId_not_in: [BigInt!]
  borrower: Bytes
  borrower_not: Bytes
  borrower_gt: Bytes
  borrower_lt: Bytes
  borrower_gte: Bytes
  borrower_lte: Bytes
  borrower_in: [Bytes!]
  borrower_not_in: [Bytes!]
  borrower_contains: Bytes
  borrower_not_contains: Bytes
  lender: Bytes
  lender_not: Bytes
  lender_gt: Bytes
  lender_lt: Bytes
  lender_gte: Bytes
  lender_lte: Bytes
  lender_in: [Bytes!]
  lender_not_in: [Bytes!]
  lender_contains: Bytes
  lender_not_contains: Bytes
  interest: BigDecimal
  interest_not: BigDecimal
  interest_gt: BigDecimal
  interest_lt: BigDecimal
  interest_gte: BigDecimal
  interest_lte: BigDecimal
  interest_in: [BigDecimal!]
  interest_not_in: [BigDecimal!]
  principal: BigDecimal
  principal_not: BigDecimal
  principal_gt: BigDecimal
  principal_lt: BigDecimal
  principal_gte: BigDecimal
  principal_lte: BigDecimal
  principal_in: [BigDecimal!]
  principal_not_in: [BigDecimal!]
  collateral: BigDecimal
  collateral_not: BigDecimal
  collateral_gt: BigDecimal
  collateral_lt: BigDecimal
  collateral_gte: BigDecimal
  collateral_lte: BigDecimal
  collateral_in: [BigDecimal!]
  collateral_not_in: [BigDecimal!]
  expiryTimestamp: BigInt
  expiryTimestamp_not: BigInt
  expiryTimestamp_gt: BigInt
  expiryTimestamp_lt: BigInt
  expiryTimestamp_gte: BigInt
  expiryTimestamp_lte: BigInt
  expiryTimestamp_in: [BigInt!]
  expiryTimestamp_not_in: [BigInt!]
  hasCallback: Boolean
  hasCallback_not: Boolean
  hasCallback_in: [Boolean!]
  hasCallback_not_in: [Boolean!]
  collateralToken: Bytes
  collateralToken_not: Bytes
  collateralToken_gt: Bytes
  collateralToken_lt: Bytes
  collateralToken_gte: Bytes
  collateralToken_lte: Bytes
  collateralToken_in: [Bytes!]
  collateralToken_not_in: [Bytes!]
  collateralToken_contains: Bytes
  collateralToken_not_contains: Bytes
  debtToken: Bytes
  debtToken_not: Bytes
  debtToken_gt: Bytes
  debtToken_lt: Bytes
  debtToken_gte: Bytes
  debtToken_lte: Bytes
  debtToken_in: [Bytes!]
  debtToken_not_in: [Bytes!]
  debtToken_contains: Bytes
  debtToken_not_contains: Bytes
  creationEvents_: ClearLoanRequestEvent_filter
  defaultedClaimEvents_: ClaimDefaultedLoanEvent_filter
  repaymentEvents_: RepayLoanEvent_filter
  extendEvents_: ExtendLoanEvent_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CoolerLoan_filter]
  or: [CoolerLoan_filter]
}

enum CoolerLoan_orderBy {
  id
  createdBlock
  createdTimestamp
  createdTransaction
  cooler
  request
  request__id
  request__createdBlock
  request__createdTimestamp
  request__createdTransaction
  request__cooler
  request__requestId
  request__borrower
  request__collateralToken
  request__debtToken
  request__amount
  request__interestPercentage
  request__loanToCollateralRatio
  request__durationSeconds
  request__isRescinded
  loanId
  borrower
  lender
  interest
  principal
  collateral
  expiryTimestamp
  hasCallback
  collateralToken
  debtToken
  creationEvents
  defaultedClaimEvents
  repaymentEvents
  extendEvents
}

type DefundEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  clearinghouse: Bytes!
  clearinghouseSnapshot: ClearinghouseSnapshot!
  amount: BigDecimal!
}

input DefundEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  clearinghouse: Bytes
  clearinghouse_not: Bytes
  clearinghouse_gt: Bytes
  clearinghouse_lt: Bytes
  clearinghouse_gte: Bytes
  clearinghouse_lte: Bytes
  clearinghouse_in: [Bytes!]
  clearinghouse_not_in: [Bytes!]
  clearinghouse_contains: Bytes
  clearinghouse_not_contains: Bytes
  clearinghouseSnapshot: String
  clearinghouseSnapshot_not: String
  clearinghouseSnapshot_gt: String
  clearinghouseSnapshot_lt: String
  clearinghouseSnapshot_gte: String
  clearinghouseSnapshot_lte: String
  clearinghouseSnapshot_in: [String!]
  clearinghouseSnapshot_not_in: [String!]
  clearinghouseSnapshot_contains: String
  clearinghouseSnapshot_contains_nocase: String
  clearinghouseSnapshot_not_contains: String
  clearinghouseSnapshot_not_contains_nocase: String
  clearinghouseSnapshot_starts_with: String
  clearinghouseSnapshot_starts_with_nocase: String
  clearinghouseSnapshot_not_starts_with: String
  clearinghouseSnapshot_not_starts_with_nocase: String
  clearinghouseSnapshot_ends_with: String
  clearinghouseSnapshot_ends_with_nocase: String
  clearinghouseSnapshot_not_ends_with: String
  clearinghouseSnapshot_not_ends_with_nocase: String
  clearinghouseSnapshot_: ClearinghouseSnapshot_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DefundEvent_filter]
  or: [DefundEvent_filter]
}

enum DefundEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  clearinghouse
  clearinghouseSnapshot
  clearinghouseSnapshot__id
  clearinghouseSnapshot__date
  clearinghouseSnapshot__blockNumber
  clearinghouseSnapshot__blockTimestamp
  clearinghouseSnapshot__clearinghouse
  clearinghouseSnapshot__isActive
  clearinghouseSnapshot__nextRebalanceTimestamp
  clearinghouseSnapshot__interestReceivables
  clearinghouseSnapshot__principalReceivables
  clearinghouseSnapshot__daiBalance
  clearinghouseSnapshot__sDaiBalance
  clearinghouseSnapshot__sDaiInDaiBalance
  clearinghouseSnapshot__treasuryDaiBalance
  clearinghouseSnapshot__treasurySDaiBalance
  clearinghouseSnapshot__treasurySDaiInDaiBalance
  amount
}

type ExtendLoanEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  periods: Int!
  loan: CoolerLoan!
  expiryTimestamp: BigInt!
  interestDue: BigDecimal!
}

input ExtendLoanEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  periods: Int
  periods_not: Int
  periods_gt: Int
  periods_lt: Int
  periods_gte: Int
  periods_lte: Int
  periods_in: [Int!]
  periods_not_in: [Int!]
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: CoolerLoan_filter
  expiryTimestamp: BigInt
  expiryTimestamp_not: BigInt
  expiryTimestamp_gt: BigInt
  expiryTimestamp_lt: BigInt
  expiryTimestamp_gte: BigInt
  expiryTimestamp_lte: BigInt
  expiryTimestamp_in: [BigInt!]
  expiryTimestamp_not_in: [BigInt!]
  interestDue: BigDecimal
  interestDue_not: BigDecimal
  interestDue_gt: BigDecimal
  interestDue_lt: BigDecimal
  interestDue_gte: BigDecimal
  interestDue_lte: BigDecimal
  interestDue_in: [BigDecimal!]
  interestDue_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ExtendLoanEvent_filter]
  or: [ExtendLoanEvent_filter]
}

enum ExtendLoanEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  periods
  loan
  loan__id
  loan__createdBlock
  loan__createdTimestamp
  loan__createdTransaction
  loan__cooler
  loan__loanId
  loan__borrower
  loan__lender
  loan__interest
  loan__principal
  loan__collateral
  loan__expiryTimestamp
  loan__hasCallback
  loan__collateralToken
  loan__debtToken
  expiryTimestamp
  interestDue
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  coolerLoanRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CoolerLoanRequest
  coolerLoanRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: CoolerLoanRequest_orderBy
    orderDirection: OrderDirection
    where: CoolerLoanRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CoolerLoanRequest!]!
  coolerLoan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CoolerLoan
  coolerLoans(
    skip: Int = 0
    first: Int = 100
    orderBy: CoolerLoan_orderBy
    orderDirection: OrderDirection
    where: CoolerLoan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CoolerLoan!]!
  clearinghouseSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClearinghouseSnapshot
  clearinghouseSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ClearinghouseSnapshot_orderBy
    orderDirection: OrderDirection
    where: ClearinghouseSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClearinghouseSnapshot!]!
  rebalanceEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebalanceEvent
  rebalanceEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceEvent_orderBy
    orderDirection: OrderDirection
    where: RebalanceEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RebalanceEvent!]!
  defundEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DefundEvent
  defundEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DefundEvent_orderBy
    orderDirection: OrderDirection
    where: DefundEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DefundEvent!]!
  requestLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestLoanEvent
  requestLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RequestLoanEvent_orderBy
    orderDirection: OrderDirection
    where: RequestLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RequestLoanEvent!]!
  rescindLoanRequestEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RescindLoanRequestEvent
  rescindLoanRequestEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RescindLoanRequestEvent_orderBy
    orderDirection: OrderDirection
    where: RescindLoanRequestEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RescindLoanRequestEvent!]!
  clearLoanRequestEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClearLoanRequestEvent
  clearLoanRequestEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ClearLoanRequestEvent_orderBy
    orderDirection: OrderDirection
    where: ClearLoanRequestEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClearLoanRequestEvent!]!
  claimDefaultedLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimDefaultedLoanEvent
  claimDefaultedLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimDefaultedLoanEvent_orderBy
    orderDirection: OrderDirection
    where: ClaimDefaultedLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimDefaultedLoanEvent!]!
  repayLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RepayLoanEvent
  repayLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RepayLoanEvent_orderBy
    orderDirection: OrderDirection
    where: RepayLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RepayLoanEvent!]!
  extendLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExtendLoanEvent
  extendLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ExtendLoanEvent_orderBy
    orderDirection: OrderDirection
    where: ExtendLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExtendLoanEvent!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RebalanceEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  clearinghouse: Bytes!
  clearinghouseSnapshot: ClearinghouseSnapshot!
  amount: BigDecimal!
}

input RebalanceEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  clearinghouse: Bytes
  clearinghouse_not: Bytes
  clearinghouse_gt: Bytes
  clearinghouse_lt: Bytes
  clearinghouse_gte: Bytes
  clearinghouse_lte: Bytes
  clearinghouse_in: [Bytes!]
  clearinghouse_not_in: [Bytes!]
  clearinghouse_contains: Bytes
  clearinghouse_not_contains: Bytes
  clearinghouseSnapshot: String
  clearinghouseSnapshot_not: String
  clearinghouseSnapshot_gt: String
  clearinghouseSnapshot_lt: String
  clearinghouseSnapshot_gte: String
  clearinghouseSnapshot_lte: String
  clearinghouseSnapshot_in: [String!]
  clearinghouseSnapshot_not_in: [String!]
  clearinghouseSnapshot_contains: String
  clearinghouseSnapshot_contains_nocase: String
  clearinghouseSnapshot_not_contains: String
  clearinghouseSnapshot_not_contains_nocase: String
  clearinghouseSnapshot_starts_with: String
  clearinghouseSnapshot_starts_with_nocase: String
  clearinghouseSnapshot_not_starts_with: String
  clearinghouseSnapshot_not_starts_with_nocase: String
  clearinghouseSnapshot_ends_with: String
  clearinghouseSnapshot_ends_with_nocase: String
  clearinghouseSnapshot_not_ends_with: String
  clearinghouseSnapshot_not_ends_with_nocase: String
  clearinghouseSnapshot_: ClearinghouseSnapshot_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RebalanceEvent_filter]
  or: [RebalanceEvent_filter]
}

enum RebalanceEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  clearinghouse
  clearinghouseSnapshot
  clearinghouseSnapshot__id
  clearinghouseSnapshot__date
  clearinghouseSnapshot__blockNumber
  clearinghouseSnapshot__blockTimestamp
  clearinghouseSnapshot__clearinghouse
  clearinghouseSnapshot__isActive
  clearinghouseSnapshot__nextRebalanceTimestamp
  clearinghouseSnapshot__interestReceivables
  clearinghouseSnapshot__principalReceivables
  clearinghouseSnapshot__daiBalance
  clearinghouseSnapshot__sDaiBalance
  clearinghouseSnapshot__sDaiInDaiBalance
  clearinghouseSnapshot__treasuryDaiBalance
  clearinghouseSnapshot__treasurySDaiBalance
  clearinghouseSnapshot__treasurySDaiInDaiBalance
  amount
}

type RepayLoanEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  amountPaid: BigDecimal!
  loan: CoolerLoan!
  secondsToExpiry: BigInt!
  principalPayable: BigDecimal!
  interestPayable: BigDecimal!
  collateralDeposited: BigDecimal!
}

input RepayLoanEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  amountPaid: BigDecimal
  amountPaid_not: BigDecimal
  amountPaid_gt: BigDecimal
  amountPaid_lt: BigDecimal
  amountPaid_gte: BigDecimal
  amountPaid_lte: BigDecimal
  amountPaid_in: [BigDecimal!]
  amountPaid_not_in: [BigDecimal!]
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: CoolerLoan_filter
  secondsToExpiry: BigInt
  secondsToExpiry_not: BigInt
  secondsToExpiry_gt: BigInt
  secondsToExpiry_lt: BigInt
  secondsToExpiry_gte: BigInt
  secondsToExpiry_lte: BigInt
  secondsToExpiry_in: [BigInt!]
  secondsToExpiry_not_in: [BigInt!]
  principalPayable: BigDecimal
  principalPayable_not: BigDecimal
  principalPayable_gt: BigDecimal
  principalPayable_lt: BigDecimal
  principalPayable_gte: BigDecimal
  principalPayable_lte: BigDecimal
  principalPayable_in: [BigDecimal!]
  principalPayable_not_in: [BigDecimal!]
  interestPayable: BigDecimal
  interestPayable_not: BigDecimal
  interestPayable_gt: BigDecimal
  interestPayable_lt: BigDecimal
  interestPayable_gte: BigDecimal
  interestPayable_lte: BigDecimal
  interestPayable_in: [BigDecimal!]
  interestPayable_not_in: [BigDecimal!]
  collateralDeposited: BigDecimal
  collateralDeposited_not: BigDecimal
  collateralDeposited_gt: BigDecimal
  collateralDeposited_lt: BigDecimal
  collateralDeposited_gte: BigDecimal
  collateralDeposited_lte: BigDecimal
  collateralDeposited_in: [BigDecimal!]
  collateralDeposited_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RepayLoanEvent_filter]
  or: [RepayLoanEvent_filter]
}

enum RepayLoanEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  amountPaid
  loan
  loan__id
  loan__createdBlock
  loan__createdTimestamp
  loan__createdTransaction
  loan__cooler
  loan__loanId
  loan__borrower
  loan__lender
  loan__interest
  loan__principal
  loan__collateral
  loan__expiryTimestamp
  loan__hasCallback
  loan__collateralToken
  loan__debtToken
  secondsToExpiry
  principalPayable
  interestPayable
  collateralDeposited
}

type RequestLoanEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  request: CoolerLoanRequest!
}

input RequestLoanEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  request: String
  request_not: String
  request_gt: String
  request_lt: String
  request_gte: String
  request_lte: String
  request_in: [String!]
  request_not_in: [String!]
  request_contains: String
  request_contains_nocase: String
  request_not_contains: String
  request_not_contains_nocase: String
  request_starts_with: String
  request_starts_with_nocase: String
  request_not_starts_with: String
  request_not_starts_with_nocase: String
  request_ends_with: String
  request_ends_with_nocase: String
  request_not_ends_with: String
  request_not_ends_with_nocase: String
  request_: CoolerLoanRequest_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RequestLoanEvent_filter]
  or: [RequestLoanEvent_filter]
}

enum RequestLoanEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  request
  request__id
  request__createdBlock
  request__createdTimestamp
  request__createdTransaction
  request__cooler
  request__requestId
  request__borrower
  request__collateralToken
  request__debtToken
  request__amount
  request__interestPercentage
  request__loanToCollateralRatio
  request__durationSeconds
  request__isRescinded
}

type RescindLoanRequestEvent {
  id: String!
  date: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  request: CoolerLoanRequest!
}

input RescindLoanRequestEvent_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  request: String
  request_not: String
  request_gt: String
  request_lt: String
  request_gte: String
  request_lte: String
  request_in: [String!]
  request_not_in: [String!]
  request_contains: String
  request_contains_nocase: String
  request_not_contains: String
  request_not_contains_nocase: String
  request_starts_with: String
  request_starts_with_nocase: String
  request_not_starts_with: String
  request_not_starts_with_nocase: String
  request_ends_with: String
  request_ends_with_nocase: String
  request_not_ends_with: String
  request_not_ends_with_nocase: String
  request_: CoolerLoanRequest_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RescindLoanRequestEvent_filter]
  or: [RescindLoanRequestEvent_filter]
}

enum RescindLoanRequestEvent_orderBy {
  id
  date
  blockNumber
  blockTimestamp
  transactionHash
  request
  request__id
  request__createdBlock
  request__createdTimestamp
  request__createdTransaction
  request__cooler
  request__requestId
  request__borrower
  request__collateralToken
  request__debtToken
  request__amount
  request__interestPercentage
  request__loanToCollateralRatio
  request__durationSeconds
  request__isRescinded
}

type Subscription {
  coolerLoanRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CoolerLoanRequest
  coolerLoanRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: CoolerLoanRequest_orderBy
    orderDirection: OrderDirection
    where: CoolerLoanRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CoolerLoanRequest!]!
  coolerLoan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CoolerLoan
  coolerLoans(
    skip: Int = 0
    first: Int = 100
    orderBy: CoolerLoan_orderBy
    orderDirection: OrderDirection
    where: CoolerLoan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CoolerLoan!]!
  clearinghouseSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClearinghouseSnapshot
  clearinghouseSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ClearinghouseSnapshot_orderBy
    orderDirection: OrderDirection
    where: ClearinghouseSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClearinghouseSnapshot!]!
  rebalanceEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebalanceEvent
  rebalanceEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceEvent_orderBy
    orderDirection: OrderDirection
    where: RebalanceEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RebalanceEvent!]!
  defundEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DefundEvent
  defundEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DefundEvent_orderBy
    orderDirection: OrderDirection
    where: DefundEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DefundEvent!]!
  requestLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestLoanEvent
  requestLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RequestLoanEvent_orderBy
    orderDirection: OrderDirection
    where: RequestLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RequestLoanEvent!]!
  rescindLoanRequestEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RescindLoanRequestEvent
  rescindLoanRequestEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RescindLoanRequestEvent_orderBy
    orderDirection: OrderDirection
    where: RescindLoanRequestEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RescindLoanRequestEvent!]!
  clearLoanRequestEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClearLoanRequestEvent
  clearLoanRequestEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ClearLoanRequestEvent_orderBy
    orderDirection: OrderDirection
    where: ClearLoanRequestEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClearLoanRequestEvent!]!
  claimDefaultedLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimDefaultedLoanEvent
  claimDefaultedLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimDefaultedLoanEvent_orderBy
    orderDirection: OrderDirection
    where: ClaimDefaultedLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimDefaultedLoanEvent!]!
  repayLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RepayLoanEvent
  repayLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RepayLoanEvent_orderBy
    orderDirection: OrderDirection
    where: RepayLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RepayLoanEvent!]!
  extendLoanEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExtendLoanEvent
  extendLoanEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ExtendLoanEvent_orderBy
    orderDirection: OrderDirection
    where: ExtendLoanEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExtendLoanEvent!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}